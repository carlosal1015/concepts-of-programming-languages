// Code generated by protoc-gen-go. DO NOT EDIT.
// source: idserv.proto

package idserv

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The client sends a unique id.
type IdRequest struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdRequest) Reset()         { *m = IdRequest{} }
func (m *IdRequest) String() string { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()    {}
func (*IdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac5a7e508d57c6b, []int{0}
}

func (m *IdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdRequest.Unmarshal(m, b)
}
func (m *IdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdRequest.Marshal(b, m, deterministic)
}
func (m *IdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdRequest.Merge(m, src)
}
func (m *IdRequest) XXX_Size() int {
	return xxx_messageInfo_IdRequest.Size(m)
}
func (m *IdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IdRequest proto.InternalMessageInfo

func (m *IdRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// The response message contains the uuid.
type IdReply struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdReply) Reset()         { *m = IdReply{} }
func (m *IdReply) String() string { return proto.CompactTextString(m) }
func (*IdReply) ProtoMessage()    {}
func (*IdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dac5a7e508d57c6b, []int{1}
}

func (m *IdReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdReply.Unmarshal(m, b)
}
func (m *IdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdReply.Marshal(b, m, deterministic)
}
func (m *IdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdReply.Merge(m, src)
}
func (m *IdReply) XXX_Size() int {
	return xxx_messageInfo_IdReply.Size(m)
}
func (m *IdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IdReply.DiscardUnknown(m)
}

var xxx_messageInfo_IdReply proto.InternalMessageInfo

func (m *IdReply) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*IdRequest)(nil), "idserv.IdRequest")
	proto.RegisterType((*IdReply)(nil), "idserv.IdReply")
}

func init() { proto.RegisterFile("idserv.proto", fileDescriptor_dac5a7e508d57c6b) }

var fileDescriptor_dac5a7e508d57c6b = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x4c, 0x29, 0x4e,
	0x2d, 0x2a, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xd4, 0xb9, 0x38,
	0x3d, 0x53, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb8, 0x38, 0x92, 0x73, 0x32,
	0x53, 0xf3, 0x4a, 0x3c, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x25, 0x59,
	0x2e, 0x76, 0x90, 0xc2, 0x82, 0x9c, 0x4a, 0x21, 0x21, 0x2e, 0x96, 0xd2, 0xd2, 0x4c, 0x98, 0x12,
	0x30, 0xdb, 0xc8, 0x86, 0x8b, 0xd3, 0xd3, 0x25, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0x48,
	0x9f, 0x8b, 0xdd, 0x2f, 0xb5, 0x3c, 0x34, 0xd4, 0xd3, 0x45, 0x48, 0x50, 0x0f, 0x6a, 0x2d, 0xdc,
	0x16, 0x29, 0x7e, 0x64, 0xa1, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xa3, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x9c, 0xf8, 0x6b, 0xa4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IDServiceClient is the client API for IDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IDServiceClient interface {
	// NewUUID generates a globally unique ID
	NewUUID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdReply, error)
}

type iDServiceClient struct {
	cc *grpc.ClientConn
}

func NewIDServiceClient(cc *grpc.ClientConn) IDServiceClient {
	return &iDServiceClient{cc}
}

func (c *iDServiceClient) NewUUID(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, "/idserv.IDService/NewUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDServiceServer is the server API for IDService service.
type IDServiceServer interface {
	// NewUUID generates a globally unique ID
	NewUUID(context.Context, *IdRequest) (*IdReply, error)
}

func RegisterIDServiceServer(s *grpc.Server, srv IDServiceServer) {
	s.RegisterService(&_IDService_serviceDesc, srv)
}

func _IDService_NewUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServiceServer).NewUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idserv.IDService/NewUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServiceServer).NewUUID(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "idserv.IDService",
	HandlerType: (*IDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewUUID",
			Handler:    _IDService_NewUUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idserv.proto",
}
